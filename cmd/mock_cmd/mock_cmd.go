// Code generated by MockGen. DO NOT EDIT.
// Source: query.go

// Package mock_cmd is a generated GoMock package.
package mock_cmd

import (
	context "context"
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCustomSearchRepository is a mock of CustomSearchRepository interface.
type MockCustomSearchRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCustomSearchRepositoryMockRecorder
}

// MockCustomSearchRepositoryMockRecorder is the mock recorder for MockCustomSearchRepository.
type MockCustomSearchRepositoryMockRecorder struct {
	mock *MockCustomSearchRepository
}

// NewMockCustomSearchRepository creates a new mock instance.
func NewMockCustomSearchRepository(ctrl *gomock.Controller) *MockCustomSearchRepository {
	mock := &MockCustomSearchRepository{ctrl: ctrl}
	mock.recorder = &MockCustomSearchRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomSearchRepository) EXPECT() *MockCustomSearchRepositoryMockRecorder {
	return m.recorder
}

// FindImage mocks base method.
func (m *MockCustomSearchRepository) FindImage(ctx context.Context, query string) (io.Reader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindImage", ctx, query)
	ret0, _ := ret[0].(io.Reader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindImage indicates an expected call of FindImage.
func (mr *MockCustomSearchRepositoryMockRecorder) FindImage(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindImage", reflect.TypeOf((*MockCustomSearchRepository)(nil).FindImage), ctx, query)
}
